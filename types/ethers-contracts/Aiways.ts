/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Aiways {
  export type PackageStruct = {
    serviceId: PromiseOrValue<BigNumberish>;
    fee: PromiseOrValue<BigNumberish>;
    period: PromiseOrValue<BigNumberish>;
  };

  export type PackageStructOutput = [BigNumber, BigNumber, BigNumber] & {
    serviceId: BigNumber;
    fee: BigNumber;
    period: BigNumber;
  };
}

export interface AiwaysInterface extends utils.Interface {
  functions: {
    "checkExpiration(address,uint256)": FunctionFragment;
    "createPackage(uint256,uint256,uint256)": FunctionFragment;
    "createService(address)": FunctionFragment;
    "getBlockTime()": FunctionFragment;
    "getExpirationTime(address,uint256)": FunctionFragment;
    "getPackage(uint256)": FunctionFragment;
    "getServiceRevenue(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pay(uint256,address)": FunctionFragment;
    "setFeeTo(address)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "withdraw(uint256,uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "checkExpiration"
      | "createPackage"
      | "createService"
      | "getBlockTime"
      | "getExpirationTime"
      | "getPackage"
      | "getServiceRevenue"
      | "owner"
      | "pay"
      | "setFeeTo"
      | "setOwner"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkExpiration",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createPackage",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createService",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExpirationTime",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPackage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getServiceRevenue",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pay",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkExpiration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPackage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpirationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPackage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getServiceRevenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFeeTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "CreatePackage(uint256,uint256,address,uint256,uint256)": EventFragment;
    "CreateService(uint256,address,address)": EventFragment;
    "OwnerChanged(address,address)": EventFragment;
    "Pay(uint256,uint256,uint256,uint256,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreatePackage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateService"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pay"): EventFragment;
}

export interface CreatePackageEventObject {
  packageId: BigNumber;
  serviceId: BigNumber;
  owner: string;
  fee: BigNumber;
  period: BigNumber;
}
export type CreatePackageEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, BigNumber],
  CreatePackageEventObject
>;

export type CreatePackageEventFilter = TypedEventFilter<CreatePackageEvent>;

export interface CreateServiceEventObject {
  serviceId: BigNumber;
  token: string;
  owner: string;
}
export type CreateServiceEvent = TypedEvent<
  [BigNumber, string, string],
  CreateServiceEventObject
>;

export type CreateServiceEventFilter = TypedEventFilter<CreateServiceEvent>;

export interface OwnerChangedEventObject {
  owner: string;
  owner_: string;
}
export type OwnerChangedEvent = TypedEvent<
  [string, string],
  OwnerChangedEventObject
>;

export type OwnerChangedEventFilter = TypedEventFilter<OwnerChangedEvent>;

export interface PayEventObject {
  paymentId: BigNumber;
  packageId: BigNumber;
  payAmount: BigNumber;
  time: BigNumber;
  to: string;
  payer: string;
}
export type PayEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, string, string],
  PayEventObject
>;

export type PayEventFilter = TypedEventFilter<PayEvent>;

export interface Aiways extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AiwaysInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkExpiration(
      user_: PromiseOrValue<string>,
      serviceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    createPackage(
      vid: PromiseOrValue<BigNumberish>,
      fee_: PromiseOrValue<BigNumberish>,
      period_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createService(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBlockTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getExpirationTime(
      user_: PromiseOrValue<string>,
      serviceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPackage(
      pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Aiways.PackageStructOutput]>;

    getServiceRevenue(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pay(
      pid: PromiseOrValue<BigNumberish>,
      to_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeTo(
      feeTo_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  checkExpiration(
    user_: PromiseOrValue<string>,
    serviceId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  createPackage(
    vid: PromiseOrValue<BigNumberish>,
    fee_: PromiseOrValue<BigNumberish>,
    period_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createService(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBlockTime(overrides?: CallOverrides): Promise<BigNumber>;

  getExpirationTime(
    user_: PromiseOrValue<string>,
    serviceId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPackage(
    pid: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Aiways.PackageStructOutput>;

  getServiceRevenue(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pay(
    pid: PromiseOrValue<BigNumberish>,
    to_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeTo(
    feeTo_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    owner_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    id: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    checkExpiration(
      user_: PromiseOrValue<string>,
      serviceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createPackage(
      vid: PromiseOrValue<BigNumberish>,
      fee_: PromiseOrValue<BigNumberish>,
      period_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createService(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getBlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    getExpirationTime(
      user_: PromiseOrValue<string>,
      serviceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPackage(
      pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Aiways.PackageStructOutput>;

    getServiceRevenue(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pay(
      pid: PromiseOrValue<BigNumberish>,
      to_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeTo(
      feeTo_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CreatePackage(uint256,uint256,address,uint256,uint256)"(
      packageId?: null,
      serviceId?: null,
      owner?: null,
      fee?: null,
      period?: null
    ): CreatePackageEventFilter;
    CreatePackage(
      packageId?: null,
      serviceId?: null,
      owner?: null,
      fee?: null,
      period?: null
    ): CreatePackageEventFilter;

    "CreateService(uint256,address,address)"(
      serviceId?: null,
      token?: null,
      owner?: null
    ): CreateServiceEventFilter;
    CreateService(
      serviceId?: null,
      token?: null,
      owner?: null
    ): CreateServiceEventFilter;

    "OwnerChanged(address,address)"(
      owner?: null,
      owner_?: null
    ): OwnerChangedEventFilter;
    OwnerChanged(owner?: null, owner_?: null): OwnerChangedEventFilter;

    "Pay(uint256,uint256,uint256,uint256,address,address)"(
      paymentId?: null,
      packageId?: null,
      payAmount?: null,
      time?: null,
      to?: null,
      payer?: null
    ): PayEventFilter;
    Pay(
      paymentId?: null,
      packageId?: null,
      payAmount?: null,
      time?: null,
      to?: null,
      payer?: null
    ): PayEventFilter;
  };

  estimateGas: {
    checkExpiration(
      user_: PromiseOrValue<string>,
      serviceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createPackage(
      vid: PromiseOrValue<BigNumberish>,
      fee_: PromiseOrValue<BigNumberish>,
      period_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createService(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    getExpirationTime(
      user_: PromiseOrValue<string>,
      serviceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPackage(
      pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getServiceRevenue(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pay(
      pid: PromiseOrValue<BigNumberish>,
      to_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeTo(
      feeTo_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOwner(
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkExpiration(
      user_: PromiseOrValue<string>,
      serviceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createPackage(
      vid: PromiseOrValue<BigNumberish>,
      fee_: PromiseOrValue<BigNumberish>,
      period_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createService(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBlockTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExpirationTime(
      user_: PromiseOrValue<string>,
      serviceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPackage(
      pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getServiceRevenue(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pay(
      pid: PromiseOrValue<BigNumberish>,
      to_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeTo(
      feeTo_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
