/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type CreatePackage = ContractEventLog<{
  packageId: string;
  serviceId: string;
  owner: string;
  fee: string;
  period: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type CreateService = ContractEventLog<{
  serviceId: string;
  token: string;
  owner: string;
  0: string;
  1: string;
  2: string;
}>;
export type OwnerChanged = ContractEventLog<{
  owner: string;
  owner_: string;
  0: string;
  1: string;
}>;
export type Pay = ContractEventLog<{
  paymentId: string;
  packageId: string;
  payAmount: string;
  time: string;
  to: string;
  payer: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;

export interface Aiways extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Aiways;
  clone(): Aiways;
  methods: {
    checkExpiration(
      user_: string,
      serviceId: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    createPackage(
      vid: number | string | BN,
      fee_: number | string | BN,
      period_: number | string | BN
    ): NonPayableTransactionObject<void>;

    createService(token: string): NonPayableTransactionObject<void>;

    getBlockTime(): NonPayableTransactionObject<string>;

    getExpirationTime(
      user_: string,
      serviceId: number | string | BN
    ): NonPayableTransactionObject<string>;

    getPackage(
      pid: number | string | BN
    ): NonPayableTransactionObject<[string, string, string]>;

    getServiceRevenue(
      id: number | string | BN
    ): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    pay(
      pid: number | string | BN,
      to_: string
    ): NonPayableTransactionObject<void>;

    setFeeTo(feeTo_: string): NonPayableTransactionObject<void>;

    setOwner(owner_: string): NonPayableTransactionObject<void>;

    withdraw(
      id: number | string | BN,
      amount: number | string | BN,
      to: string
    ): NonPayableTransactionObject<void>;
  };
  events: {
    CreatePackage(cb?: Callback<CreatePackage>): EventEmitter;
    CreatePackage(
      options?: EventOptions,
      cb?: Callback<CreatePackage>
    ): EventEmitter;

    CreateService(cb?: Callback<CreateService>): EventEmitter;
    CreateService(
      options?: EventOptions,
      cb?: Callback<CreateService>
    ): EventEmitter;

    OwnerChanged(cb?: Callback<OwnerChanged>): EventEmitter;
    OwnerChanged(
      options?: EventOptions,
      cb?: Callback<OwnerChanged>
    ): EventEmitter;

    Pay(cb?: Callback<Pay>): EventEmitter;
    Pay(options?: EventOptions, cb?: Callback<Pay>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "CreatePackage", cb: Callback<CreatePackage>): void;
  once(
    event: "CreatePackage",
    options: EventOptions,
    cb: Callback<CreatePackage>
  ): void;

  once(event: "CreateService", cb: Callback<CreateService>): void;
  once(
    event: "CreateService",
    options: EventOptions,
    cb: Callback<CreateService>
  ): void;

  once(event: "OwnerChanged", cb: Callback<OwnerChanged>): void;
  once(
    event: "OwnerChanged",
    options: EventOptions,
    cb: Callback<OwnerChanged>
  ): void;

  once(event: "Pay", cb: Callback<Pay>): void;
  once(event: "Pay", options: EventOptions, cb: Callback<Pay>): void;
}
